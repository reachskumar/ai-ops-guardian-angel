name: CMDB Discovery

on:
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID for discovery'
        required: true
        type: string
      cloud_provider:
        description: 'Cloud provider to discover'
        required: true
        type: choice
        options:
          - aws
          - azure
          - gcp
          - all
      regions:
        description: 'Comma-separated regions (leave empty for all)'
        required: false
        type: string
      force_refresh:
        description: 'Force refresh all resources'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  repository_dispatch:
    types: [cmdb_discovery]

env:
  PYTHON_VERSION: '3.11'
  DISCOVERY_TIMEOUT: 1800  # 30 minutes

jobs:
  discover-aws:
    if: github.event.inputs.cloud_provider == 'aws' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 pymongo motor pydantic
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Run AWS discovery
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          REGIONS: ${{ github.event.inputs.regions || 'us-east-1,us-west-2,eu-west-1' }}
          FORCE_REFRESH: ${{ github.event.inputs.force_refresh || false }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/cmdb/aws_discovery.py
          
      - name: Upload discovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aws-discovery-${{ github.run_id }}
          path: |
            discovery_logs/
            *.json
            *.log

  discover-azure:
    if: github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-mgmt-compute azure-mgmt-network azure-mgmt-storage azure-mgmt-sql azure-identity pymongo motor pydantic
          
      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Run Azure discovery
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          FORCE_REFRESH: ${{ github.event.inputs.force_refresh || false }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/cmdb/azure_discovery.py
          
      - name: Upload discovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: azure-discovery-${{ github.run_id }}
          path: |
            discovery_logs/
            *.json
            *.log

  discover-gcp:
    if: github.event.inputs.cloud_provider == 'gcp' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-cloud-compute google-cloud-storage google-cloud-sql google-cloud-network pymongo motor pydantic
          
      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set GCP project
        run: |
          echo ${{ secrets.GCP_PROJECT_ID }} > gcp_project.txt
          
      - name: Run GCP discovery
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          FORCE_REFRESH: ${{ github.event.inputs.force_refresh || false }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/cmdb/gcp_discovery.py
          
      - name: Upload discovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gcp-discovery-${{ github.run_id }}
          path: |
            discovery_logs/
            *.json
            *.log

  build-relationships:
    needs: [discover-aws, discover-azure, discover-gcp]
    if: always() && (needs.discover-aws.result == 'success' || needs.discover-azure.result == 'success' || needs.discover-gcp.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo motor pydantic
          
      - name: Download discovery artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-discovery-${{ github.run_id }}'
          merge-multiple: true
          
      - name: Build resource relationships
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/cmdb/build_relationships.py
          
      - name: Upload relationship artifacts
        uses: actions/upload-artifact@v4
        with:
          name: relationships-${{ github.run_id }}
          path: |
            relationship_logs/
            *.json
            *.log

  generate-cmdb-report:
    needs: [build-relationships]
    if: always() && needs.build-relationships.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo motor pydantic jinja2
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ github.run_id }}'
          merge-multiple: true
          
      - name: Generate CMDB report
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/cmdb/generate_report.py
          
      - name: Upload CMDB report
        uses: actions/upload-artifact@v4
        with:
          name: cmdb-report-${{ github.run_id }}
          path: |
            cmdb_reports/
            *.html
            *.json
            *.log

  notify-completion:
    needs: [discover-aws, discover-azure, discover-gcp, build-relationships, generate-cmdb-report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Download CMDB report
        uses: actions/download-artifact@v4
        with:
          name: cmdb-report-${{ github.run_id }}
          
      - name: Send completion notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PAGERDUTY_ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          python scripts/cmdb/notify_completion.py
          
      - name: Comment on PR if triggered by PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'cmdb_reports/cmdb_summary.json';
            
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const comment = `## CMDB Discovery Complete âœ…
              
              **Tenant:** ${report.tenant_id}
              **Total Resources:** ${report.total_resources}
              **Cloud Providers:** ${Object.keys(report.resources_by_provider).join(', ')}
              **Public Resources:** ${report.public_resources}
              **Compliance Issues:** ${report.compliance_issues}
              **Total Monthly Cost:** $${report.total_monthly_cost}
              
              [View Full Report](${report.report_url})
              [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
