name: ChatOps - Cloud Operations

on:
  workflow_dispatch:
    inputs:
      provider:
        description: "Cloud provider (aws|azure|gcp)"
        required: true
        type: choice
        options: [aws, azure, gcp]
      action:
        description: "Action (inventory|instance_start|instance_stop|instance_reboot|instance_resize|sg_authorize|sg_revoke|ebs_snapshot|dns_upsert|cdn_invalidate)"
        required: true
      region:
        description: "Region (e.g., us-east-1)"
        required: true
      params:
        description: "JSON-encoded parameters for the action"
        required: false
        default: "{}"
      dry_run:
        description: "Plan only (no changes)"
        required: false
        default: "false"
      require_approval:
        description: "Require approval for risky changes"
        required: false
        default: "true"
      confirm:
        description: "Type 'yes' to approve execution when required"
        required: false
        default: ""

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ github.event.inputs.provider == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Parse params
        id: p
        run: |
          echo "params=${{ github.event.inputs.params }}" > params.json
          cat params.json

      - name: Assess risk and generate plan
        id: assess
        run: |
          set -euo pipefail
          ACTION=${{ github.event.inputs.action }}
          PARAMS=$(cat params.json)
          get_param() { echo "$PARAMS" | jq -r .$1; }
          RISK="low"
          PLAN="{}"
          if [ "$ACTION" = "sg_authorize" ]; then
            CIDR=$(get_param cidr)
            TP=$(get_param to_port)
            if [ "$CIDR" = "0.0.0.0/0" ] && [ ${TP:-0} -lt 1024 ]; then RISK="high"; fi
            PLAN=$(jq -n --arg action "$ACTION" --arg cidr "$CIDR" --argjson tp ${TP:-0} '{action:$action, change:"open_ingress", cidr:$cidr, to_port:$tp}')
          elif [ "$ACTION" = "instance_stop" ] || [ "$ACTION" = "instance_start" ]; then
            COUNT=$(get_param instance_ids | jq 'length')
            if [ ${COUNT:-0} -gt 3 ]; then RISK="medium"; fi
            PLAN=$(jq -n --arg action "$ACTION" --argjson count ${COUNT:-0} '{action:$action, instances:$count}')
          else
            PLAN=$(jq -n --arg action "$ACTION" '{action:$action, details:"standard"}')
          fi
          echo "$PLAN" > plan.json
          echo "risk=$RISK" >> $GITHUB_OUTPUT
          echo "$RISK" > risk.txt

      - name: Approval gate
        if: ${{ github.event.inputs.require_approval == 'true' && github.event.inputs.dry_run != 'true' && github.event.inputs.confirm != 'yes' }}
        run: |
          echo "Approval required. Risk: ${{ steps.assess.outputs.risk }}. Re-run with confirm: 'yes' to proceed." | tee gate.txt
          exit 2

      - name: Execute AWS action
        if: ${{ github.event.inputs.provider == 'aws' && github.event.inputs.dry_run != 'true' }}
        env:
          ACTION: ${{ github.event.inputs.action }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          PARAMS=$(cat params.json)
          get_param() { echo "$PARAMS" | jq -r .$1; }
          case "$ACTION" in
            inventory)
              aws ec2 describe-instances --query 'Reservations[].Instances[].{Id:InstanceId,Type:InstanceType,State:State.Name,AZ:Placement.AvailabilityZone,Name:Tags[?Key==`Name`].Value|[0]}' --output table | tee inventory.txt
              ;;
            instance_start)
              IDS=$(get_param instance_ids | jq -r 'join(" ")')
              aws ec2 start-instances --instance-ids $IDS | tee op.txt
              ;;
            instance_stop)
              IDS=$(get_param instance_ids | jq -r 'join(" ")')
              aws ec2 stop-instances --instance-ids $IDS | tee op.txt
              ;;
            instance_reboot)
              IDS=$(get_param instance_ids | jq -r 'join(" ")')
              aws ec2 reboot-instances --instance-ids $IDS | tee op.txt
              ;;
            instance_resize)
              ID=$(get_param instance_id)
              TYPE=$(get_param instance_type)
              aws ec2 modify-instance-attribute --instance-id "$ID" --instance-type "\"$TYPE\"" | tee op.txt
              ;;
            sg_authorize)
              SG=$(get_param sg_id); PROTO=$(get_param protocol); FP=$(get_param from_port); TP=$(get_param to_port); CIDR=$(get_param cidr)
              aws ec2 authorize-security-group-ingress --group-id "$SG" --ip-permissions IpProtocol=$PROTO,FromPort=$FP,ToPort=$TP,IpRanges="[{CidrIp=$CIDR}]" | tee op.txt
              ;;
            sg_revoke)
              SG=$(get_param sg_id); PROTO=$(get_param protocol); FP=$(get_param from_port); TP=$(get_param to_port); CIDR=$(get_param cidr)
              aws ec2 revoke-security-group-ingress --group-id "$SG" --ip-permissions IpProtocol=$PROTO,FromPort=$FP,ToPort=$TP,IpRanges="[{CidrIp=$CIDR}]" | tee op.txt
              ;;
            ebs_snapshot)
              VOL=$(get_param volume_id); DESC=$(get_param description)
              aws ec2 create-snapshot --volume-id "$VOL" --description "$DESC" | tee op.txt
              ;;
            dns_upsert)
              ZONE=$(get_param zone_id); NAME=$(get_param name); RTYPE=$(get_param rtype); VALUE=$(get_param value); TTL=$(get_param ttl)
              cat > change-batch.json <<JSON
              {"Changes":[{"Action":"UPSERT","ResourceRecordSet":{"Name":"$NAME","Type":"$RTYPE","TTL":${TTL:-60},"ResourceRecords":[{"Value":"$VALUE"}]}}]}
JSON
              aws route53 change-resource-record-sets --hosted-zone-id "$ZONE" --change-batch file://change-batch.json | tee op.txt
              ;;
            cdn_invalidate)
              DIST=$(get_param distribution_id); PATHS=$(get_param paths | jq -c .)
              aws cloudfront create-invalidation --distribution-id "$DIST" --paths $(echo $PATHS | jq -r 'join(" ")') | tee op.txt
              ;;
            *)
              echo "Unsupported action: $ACTION"; exit 1;
              ;;
          esac

      - name: Azure login
        if: ${{ github.event.inputs.provider == 'azure' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Execute Azure action
        if: ${{ github.event.inputs.provider == 'azure' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -euo pipefail
          PARAMS=$(cat params.json)
          get_param() { echo "$PARAMS" | jq -r .$1; }
          ACTION=${{ github.event.inputs.action }}
          case "$ACTION" in
            inventory)
              az vm list -o table | tee inventory.txt ;;
            instance_start)
              RG=$(get_param resource_group); NAME=$(get_param vm_name)
              az vm start -g "$RG" -n "$NAME" | tee op.txt ;;
            instance_stop)
              RG=$(get_param resource_group); NAME=$(get_param vm_name)
              az vm deallocate -g "$RG" -n "$NAME" | tee op.txt ;;
            *) echo "Unsupported azure action: $ACTION"; exit 1;;
          esac

      - name: Setup gcloud
        if: ${{ github.event.inputs.provider == 'gcp' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Execute GCP action
        if: ${{ github.event.inputs.provider == 'gcp' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -euo pipefail
          PARAMS=$(cat params.json)
          get_param() { echo "$PARAMS" | jq -r .$1; }
          ACTION=${{ github.event.inputs.action }}
          PROJECT=${{ github.event.inputs.region }} # reuse field for project if needed
          case "$ACTION" in
            inventory)
              gcloud compute instances list --project "$PROJECT" | tee inventory.txt ;;
            instance_start)
              ZONE=$(get_param zone); NAME=$(get_param instance)
              gcloud compute instances start "$NAME" --zone "$ZONE" --project "$PROJECT" | tee op.txt ;;
            instance_stop)
              ZONE=$(get_param zone); NAME=$(get_param instance)
              gcloud compute instances stop "$NAME" --zone "$ZONE" --project "$PROJECT" | tee op.txt ;;
            *) echo "Unsupported gcp action: $ACTION"; exit 1;;
          esac

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: cloud-ops-output
          path: |
            *.txt
            inventory.txt
            op.txt
            risk.txt
            plan.json


