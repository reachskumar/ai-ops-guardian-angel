name: AI Ops Guardian Angel - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage to run (security-scan|backend-test|frontend-test|build-images|deploy-staging|deploy-production)"
        required: true
        default: "security-scan"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'security-scan' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "detect --no-banner --verbose --redact --exit-code 1"

      - name: Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          generateSarif: true
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        env:
          SEMGREP_RULES: >-
            p/ci
            p/secrets
            p/docker
            p/kubernetes
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

      - name: Run tfsec (IaC scan)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true

      - name: Run Checkov (IaC policy)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          soft_fail: true

      - name: Install conftest
        run: |
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.52.0/conftest_0.52.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
      - name: Conftest policy check (k8s manifests)
        run: |
          if [ -d policies/opa/kubernetes ]; then conftest test -p policies/opa/kubernetes infrastructure/k8s/production || exit 1; fi

      - name: Dependency review
        uses: actions/dependency-review-action@v4

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Testing
  backend-test:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'backend-test' }}
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend/services/ai-services
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run backend tests
        run: |
          cd backend/services/ai-services
          python -m pytest tests/ -v --cov=src --cov-report=xml
        env:
          MONGODB_URI: mongodb://admin:password@localhost:27017/test
          REDIS_URI: redis://localhost:6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/services/ai-services/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-test:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'frontend-test' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

  # Build and Push Docker Images
  build-images:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'build-images' }}
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/api-gateway
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign API Gateway image (cosign keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }} --yes

      - name: SBOM for API Gateway (syft)
        uses: anchore/syft-action@v0.16.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
          output-file: sbom-api-gateway-${{ github.sha }}.spdx.json

      - name: Grype scan API Gateway image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
          fail-build: true

      - name: Build and push AI Services
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/ai-services
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign AI Services image (cosign keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }} --yes

      - name: SBOM for AI Services (syft)
        uses: anchore/syft-action@v0.16.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          output-file: sbom-ai-services-${{ github.sha }}.spdx.json

      - name: Grype scan AI Services image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          fail-build: true

      - name: Build and push Data Services
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/data-services
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign Data Services image (cosign keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-services:${{ github.sha }} --yes

      - name: SBOM for Data Services (syft)
        uses: anchore/syft-action@v0.16.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-services:${{ github.sha }}
          output-file: sbom-data-services-${{ github.sha }}.spdx.json

      - name: Grype scan Data Services image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-services:${{ github.sha }}
          fail-build: true

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign Frontend image (cosign keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} --yes

      - name: SBOM for Frontend (syft)
        uses: anchore/syft-action@v0.16.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          output-file: sbom-frontend-${{ github.sha }}.spdx.json

      - name: Grype scan Frontend image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          fail-build: true

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms-${{ github.sha }}
          path: |
            sbom-*.spdx.json

  # Deploy to Staging
  deploy-staging:
    if: ${{ (github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'deploy-staging') && github.ref == 'refs/heads/develop' }}
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging (rolling)
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/k8s/staging/
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/k8s/staging/
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/api-gateway -n ai-ops-staging
          kubectl rollout status deployment/ai-services -n ai-ops-staging
          kubectl rollout status deployment/frontend -n ai-ops-staging

      - name: Run integration tests
        run: |
      - name: Enforce SLO gate (staging)
        env:
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL_STAGING }}
          THRESHOLD: "0.01"
        run: |
          python3 scripts/ci/slo_gate.py
          # Wait for services to be ready
          sleep 30
          
          # Run integration tests
          python scripts/test-integration.py --environment staging

  # Deploy to Production
  deploy-production:
    if: ${{ (github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'deploy-production') && github.ref == 'refs/heads/main' }}
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production (rolling)
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/k8s/production/
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/k8s/production/
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/api-gateway -n ai-ops-production
          kubectl rollout status deployment/ai-services -n ai-ops-production
          kubectl rollout status deployment/frontend -n ai-ops-production

      - name: SLO gate (prod)
        env:
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL_PRODUCTION }}
          THRESHOLD: "0.005"
        run: |
          python3 scripts/ci/slo_gate.py

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Run smoke tests
          python scripts/test-smoke.py --environment production

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ Production deployment successful! Version: ${{ github.sha }}"}'
            ${{ secrets.SLACK_WEBHOOK_URL }} 

      - name: Page on-call on failure
        if: failure()
        run: |
          curl -X POST 'https://events.pagerduty.com/v2/enqueue' \
            -H 'Content-Type: application/json' \
            -d '{
              "routing_key": "${{ secrets.PAGERDUTY_ROUTING_KEY }}",
              "event_action": "trigger",
              "payload": {
                "summary": "Prod deploy failed for ${{ github.sha }}",
                "severity": "critical",
                "source": "github-actions"
              }
            }'