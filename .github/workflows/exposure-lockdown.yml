name: Exposure Lockdown

on:
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID for exposure scan'
        required: true
        type: string
      cloud_provider:
        description: 'Cloud provider to scan'
        required: true
        type: choice
        options:
          - aws
          - azure
          - gcp
          - all
      auto_lockdown:
        description: 'Automatically lockdown exposed resources'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        type: boolean
        default: true
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  repository_dispatch:
    types: [exposure_scan]

env:
  PYTHON_VERSION: '3.11'
  SCAN_TIMEOUT: 900  # 15 minutes

jobs:
  scan-exposure:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 azure-mgmt-network google-cloud-network pymongo motor pydantic
          
      - name: Configure AWS credentials
        if: github.event.inputs.cloud_provider == 'aws' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Configure Azure credentials
        if: github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Configure GCP credentials
        if: github.event.inputs.cloud_provider == 'gcp' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run exposure scan
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'all' }}
          AUTO_LOCKDOWN: ${{ github.event.inputs.auto_lockdown || false }}
          DRY_RUN: ${{ github.event.inputs.dry_run || true }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/security/exposure_scanner.py
          
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: exposure-scan-${{ github.run_id }}
          path: |
            exposure_logs/
            *.json
            *.log

  generate-lockdown-plan:
    needs: [scan-exposure]
    if: always() && needs.scan-exposure.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo motor pydantic jinja2
          
      - name: Download scan artifacts
        uses: actions/download-artifact@v4
        with:
          name: exposure-scan-${{ github.run_id }}
          
      - name: Generate lockdown plan
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/security/generate_lockdown_plan.py
          
      - name: Upload lockdown plan
        uses: actions/upload-artifact@v4
        with:
          name: lockdown-plan-${{ github.run_id }}
          path: |
            lockdown_plans/
            *.json
            *.html
            *.log

  policy-validation:
    needs: [generate-lockdown-plan]
    if: always() && needs.generate-lockdown_plan.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conftest
          
      - name: Download lockdown plan
        uses: actions/download-artifact@v4
        with:
          name: lockdown-plan-${{ github.run_id }}
          
      - name: Run OPA policy validation
        run: |
          # Install conftest
          curl -L -o conftest https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_linux_x86_64.tar.gz
          tar -xzf conftest_linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/
          
          # Run policy validation
          conftest test -p policies/opa/security lockdown_plans/ --output json > policy_results.json
          
      - name: Upload policy validation results
        uses: actions/upload-artifact@v4
        with:
          name: policy-validation-${{ github.run_id }}
          path: |
            policy_results.json
            lockdown_plans/

  approval-gate:
    needs: [policy-validation]
    if: always() && needs.policy-validation.result == 'success' && github.event.inputs.auto_lockdown == 'false'
    runs-on: ubuntu-latest
    environment: security-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ github.run_id }}'
          merge-multiple: true
          
      - name: Generate approval summary
        run: |
          python scripts/security/generate_approval_summary.py
          
      - name: Upload approval summary
        uses: actions/upload-artifact@v4
        with:
          name: approval-summary-${{ github.run_id }}
          path: |
            approval_summaries/
            *.html
            *.json

  execute-lockdown:
    needs: [policy-validation, approval-gate]
    if: always() && needs.policy-validation.result == 'success' && (github.event.inputs.auto_lockdown == 'true' || needs.approval-gate.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 azure-mgmt-network google-cloud-network pymongo motor pydantic
          
      - name: Configure AWS credentials
        if: github.event.inputs.cloud_provider == 'aws' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Configure Azure credentials
        if: github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Configure GCP credentials
        if: github.event.inputs.cloud_provider == 'gcp' || github.event.inputs.cloud_provider == 'all' || github.event.schedule
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Download lockdown plan
        uses: actions/download-artifact@v4
        with:
          name: lockdown-plan-${{ github.run_id }}
          
      - name: Execute lockdown
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider || 'all' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || false }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/security/execute_lockdown.py
          
      - name: Upload execution results
        uses: actions/upload-artifact@v4
        with:
          name: lockdown-execution-${{ github.run_id }}
          path: |
            execution_logs/
            *.json
            *.log

  generate-final-report:
    needs: [execute-lockdown]
    if: always() && needs.execute-lockdown.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo motor pydantic jinja2
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ github.run_id }}'
          merge-multiple: true
          
      - name: Generate final report
        env:
          TENANT_ID: ${{ github.event.inputs.tenant_id || 'default' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          python scripts/security/generate_final_report.py
          
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: final-report-${{ github.run_id }}
          path: |
            final_reports/
            *.html
            *.json
            *.log

  notify-completion:
    needs: [scan-exposure, generate-lockdown-plan, policy-validation, execute-lockdown, generate-final-report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Download final report
        uses: actions/download-artifact@v4
        with:
          name: final-report-${{ github.run_id }}
          
      - name: Send completion notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PAGERDUTY_ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          python scripts/security/notify_lockdown_completion.py
          
      - name: Comment on PR if triggered by PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'final_reports/exposure_summary.json';
            
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const comment = `## Exposure Lockdown Complete ✅
              
              **Tenant:** ${report.tenant_id}
              **Resources Scanned:** ${report.resources_scanned}
              **Public Resources Found:** ${report.public_resources_found}
              **Resources Locked Down:** ${report.resources_locked_down}
              **Policy Violations:** ${report.policy_violations}
              **Risk Score:** ${report.risk_score}/100
              
              [View Full Report](${report.report_url})
              [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
