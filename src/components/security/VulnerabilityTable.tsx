
import React, { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Shield, 
  ShieldAlert, 
  Loader2, 
  CheckCircle2,
  Filter
} from "lucide-react";
import { toast } from "@/hooks/use-toast";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";

interface Vulnerability {
  id: string;
  title: string;
  severity: string;
  component: string;
  discovered: string;
  status: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  onRescan?: () => void;
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ 
  vulnerabilities,
  onRescan 
}) => {
  const [remediating, setRemediating] = useState<string | null>(null);
  const [scanning, setScanning] = useState(false);
  const [filters, setFilters] = useState({
    severity: "",
    component: "",
  });

  // Get unique values for filter dropdowns
  const severityOptions = React.useMemo(() => {
    return [...new Set(vulnerabilities.map(vuln => vuln.severity))];
  }, [vulnerabilities]);
  
  const componentOptions = React.useMemo(() => {
    return [...new Set(vulnerabilities.map(vuln => vuln.component))];
  }, [vulnerabilities]);

  // Apply filters to vulnerabilities
  const filteredVulnerabilities = React.useMemo(() => {
    return vulnerabilities.filter(vuln => {
      if (filters.severity && vuln.severity.toLowerCase() !== filters.severity.toLowerCase()) {
        return false;
      }
      if (filters.component && vuln.component !== filters.component) {
        return false;
      }
      return true;
    });
  }, [vulnerabilities, filters]);

  const getSeverityBadge = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return <Badge className="bg-critical">Critical</Badge>;
      case "high":
        return <Badge className="bg-warning">High</Badge>;
      case "medium":
        return <Badge className="bg-info">Medium</Badge>;
      default:
        return <Badge variant="outline">Low</Badge>;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status.toLowerCase()) {
      case "open":
        return (
          <Badge variant="outline" className="border-critical text-critical">
            Open
          </Badge>
        );
      case "in-progress":
        return (
          <Badge variant="outline" className="border-warning text-warning">
            In Progress
          </Badge>
        );
      case "resolved":
        return (
          <Badge variant="outline" className="border-success text-success">
            Resolved
          </Badge>
        );
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const handleRunScan = () => {
    setScanning(true);
    
    // Simulate scan
    setTimeout(() => {
      setScanning(false);
      if (onRescan) {
        onRescan();
      }
      toast({
        title: "Vulnerability Scan Complete",
        description: "Scan completed successfully."
      });
    }, 3000);
  };

  const handleRemediate = (vulnId: string) => {
    setRemediating(vulnId);
    
    // Simulate remediation
    setTimeout(() => {
      setRemediating(null);
      toast({
        title: "Remediation Complete",
        description: `Successfully remediated issue ${vulnId}`,
      });
    }, 3000);
  };

  const handleFilterChange = (type: "severity" | "component", value: string) => {
    setFilters(prev => ({
      ...prev,
      [type]: value
    }));
  };

  const clearFilters = () => {
    setFilters({
      severity: "",
      component: ""
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-4">
        <div className="text-sm text-muted-foreground">
          {filteredVulnerabilities.length} vulnerabilities found
          {(filters.severity || filters.component) && (
            <span className="ml-2">
              (filtered from {vulnerabilities.length})
            </span>
          )}
        </div>
        <div className="flex gap-2 items-center">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline" 
                size="sm"
                className="flex items-center gap-2"
              >
                <Filter className="h-4 w-4" />
                Filter
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-64 p-4" align="end">
              <div className="space-y-4">
                <h4 className="font-medium text-sm mb-3">Filter vulnerabilities</h4>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Severity</label>
                  <Select
                    value={filters.severity}
                    onValueChange={(value) => handleFilterChange("severity", value)}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All severities</SelectItem>
                      {severityOptions.map((severity) => (
                        <SelectItem key={severity} value={severity}>
                          {severity}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Component</label>
                  <Select
                    value={filters.component}
                    onValueChange={(value) => handleFilterChange("component", value)}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select component" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">All components</SelectItem>
                      {componentOptions.map((component) => (
                        <SelectItem key={component} value={component}>
                          {component}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {(filters.severity || filters.component) && (
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={clearFilters}
                    className="mt-2 w-full"
                  >
                    Clear filters
                  </Button>
                )}
              </div>
            </PopoverContent>
          </Popover>
          
          <Button
            size="sm"
            onClick={handleRunScan}
            disabled={scanning}
            className="flex items-center gap-2"
          >
            {scanning ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                Scanning...
              </>
            ) : (
              <>
                <Shield className="h-4 w-4" />
                Run Vulnerability Scan
              </>
            )}
          </Button>
        </div>
      </div>
      
      <div className="rounded-md border border-border">
        <div className="grid grid-cols-14 gap-2 border-b border-border bg-muted py-3 px-4">
          <div className="col-span-2 text-sm font-medium">ID</div>
          <div className="col-span-4 text-sm font-medium">Title</div>
          <div className="col-span-2 text-sm font-medium">Severity</div>
          <div className="col-span-2 text-sm font-medium">Discovered</div>
          <div className="col-span-2 text-sm font-medium">Status</div>
          <div className="col-span-2 text-sm font-medium text-right">Actions</div>
        </div>
        <div className="divide-y divide-border">
          {filteredVulnerabilities.length > 0 ? (
            filteredVulnerabilities.map((vuln, i) => (
              <div key={i} className="grid grid-cols-14 gap-2 py-3 px-4 hover:bg-muted/50">
                <div className="col-span-2 text-sm">{vuln.id}</div>
                <div className="col-span-4 text-sm">
                  <div>{vuln.title}</div>
                  <div className="text-xs text-muted-foreground mt-1">{vuln.component}</div>
                </div>
                <div className="col-span-2 text-sm">{getSeverityBadge(vuln.severity)}</div>
                <div className="col-span-2 text-sm">{vuln.discovered}</div>
                <div className="col-span-2 text-sm">{getStatusBadge(vuln.status)}</div>
                <div className="col-span-2 text-sm text-right">
                  {vuln.status.toLowerCase() !== "resolved" && (
                    <Button 
                      size="sm" 
                      variant="outline"
                      disabled={remediating === vuln.id || vuln.status === "In-Progress"} 
                      onClick={() => handleRemediate(vuln.id)}
                    >
                      {remediating === vuln.id ? (
                        <>
                          <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                          Fixing...
                        </>
                      ) : (
                        <>
                          <ShieldAlert className="h-3 w-3 mr-1" />
                          Remediate
                        </>
                      )}
                    </Button>
                  )}
                  {vuln.status.toLowerCase() === "resolved" && (
                    <span className="flex items-center justify-end text-success">
                      <CheckCircle2 className="h-4 w-4 mr-1" />
                      Fixed
                    </span>
                  )}
                </div>
              </div>
            ))
          ) : (
            <div className="py-10 text-center text-muted-foreground">
              No vulnerabilities found matching current filters.
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTable;
