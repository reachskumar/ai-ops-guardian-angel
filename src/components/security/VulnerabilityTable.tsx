
import React, { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Shield, 
  ShieldAlert, 
  Loader2, 
  CheckCircle2
} from "lucide-react";
import { toast } from "@/hooks/use-toast";

interface Vulnerability {
  id: string;
  title: string;
  severity: string;
  component: string;
  discovered: string;
  status: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  onRescan?: () => void;
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ 
  vulnerabilities,
  onRescan 
}) => {
  const [remediating, setRemediating] = useState<string | null>(null);
  const [scanning, setScanning] = useState(false);

  const getSeverityBadge = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return <Badge className="bg-critical">Critical</Badge>;
      case "high":
        return <Badge className="bg-warning">High</Badge>;
      case "medium":
        return <Badge className="bg-info">Medium</Badge>;
      default:
        return <Badge variant="outline">Low</Badge>;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status.toLowerCase()) {
      case "open":
        return (
          <Badge variant="outline" className="border-critical text-critical">
            Open
          </Badge>
        );
      case "in-progress":
        return (
          <Badge variant="outline" className="border-warning text-warning">
            In Progress
          </Badge>
        );
      case "resolved":
        return (
          <Badge variant="outline" className="border-success text-success">
            Resolved
          </Badge>
        );
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const handleRunScan = () => {
    setScanning(true);
    
    // Simulate scan
    setTimeout(() => {
      setScanning(false);
      if (onRescan) {
        onRescan();
      }
      toast({
        title: "Vulnerability Scan Complete",
        description: "Scan completed successfully."
      });
    }, 3000);
  };

  const handleRemediate = (vulnId: string) => {
    setRemediating(vulnId);
    
    // Simulate remediation
    setTimeout(() => {
      setRemediating(null);
      toast({
        title: "Remediation Complete",
        description: `Successfully remediated issue ${vulnId}`,
      });
    }, 3000);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center mb-4">
        <div className="text-sm text-muted-foreground">
          {vulnerabilities.length} vulnerabilities found
        </div>
        <Button
          size="sm"
          onClick={handleRunScan}
          disabled={scanning}
          className="flex items-center gap-2"
        >
          {scanning ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              Scanning...
            </>
          ) : (
            <>
              <Shield className="h-4 w-4" />
              Run Vulnerability Scan
            </>
          )}
        </Button>
      </div>
      
      <div className="rounded-md border border-border">
        <div className="grid grid-cols-14 gap-2 border-b border-border bg-muted py-3 px-4">
          <div className="col-span-2 text-sm font-medium">ID</div>
          <div className="col-span-4 text-sm font-medium">Title</div>
          <div className="col-span-2 text-sm font-medium">Severity</div>
          <div className="col-span-2 text-sm font-medium">Discovered</div>
          <div className="col-span-2 text-sm font-medium">Status</div>
          <div className="col-span-2 text-sm font-medium text-right">Actions</div>
        </div>
        <div className="divide-y divide-border">
          {vulnerabilities.map((vuln, i) => (
            <div key={i} className="grid grid-cols-14 gap-2 py-3 px-4 hover:bg-muted/50">
              <div className="col-span-2 text-sm">{vuln.id}</div>
              <div className="col-span-4 text-sm">
                <div>{vuln.title}</div>
                <div className="text-xs text-muted-foreground mt-1">{vuln.component}</div>
              </div>
              <div className="col-span-2 text-sm">{getSeverityBadge(vuln.severity)}</div>
              <div className="col-span-2 text-sm">{vuln.discovered}</div>
              <div className="col-span-2 text-sm">{getStatusBadge(vuln.status)}</div>
              <div className="col-span-2 text-sm text-right">
                {vuln.status.toLowerCase() !== "resolved" && (
                  <Button 
                    size="sm" 
                    variant="outline"
                    disabled={remediating === vuln.id || vuln.status === "In-Progress"} 
                    onClick={() => handleRemediate(vuln.id)}
                  >
                    {remediating === vuln.id ? (
                      <>
                        <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                        Fixing...
                      </>
                    ) : (
                      <>
                        <ShieldAlert className="h-3 w-3 mr-1" />
                        Remediate
                      </>
                    )}
                  </Button>
                )}
                {vuln.status.toLowerCase() === "resolved" && (
                  <span className="flex items-center justify-end text-success">
                    <CheckCircle2 className="h-4 w-4 mr-1" />
                    Fixed
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTable;
