
import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "@/hooks/use-toast";
import { Shield, Scan, AlertTriangle, CheckCircle2, Clock } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";

interface ScanConfig {
  name: string;
  scanType: string;
  targetType: string;
  targetIdentifier: string;
  scanEngine: string;
  parameters: Record<string, any>;
}

interface ScanResult {
  id: string;
  status: string;
  started_at: string;
  completed_at?: string;
  summary?: any;
  error_message?: string;
}

const VulnerabilityScanner: React.FC = () => {
  const [scanConfig, setScanConfig] = useState<ScanConfig>({
    name: "",
    scanType: "vulnerability",
    targetType: "infrastructure",
    targetIdentifier: "",
    scanEngine: "trivy",
    parameters: {}
  });
  
  const [scanning, setScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);

  const handleInputChange = (field: keyof ScanConfig, value: string) => {
    setScanConfig(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleParameterChange = (key: string, value: string) => {
    setScanConfig(prev => ({
      ...prev,
      parameters: {
        ...prev.parameters,
        [key]: value
      }
    }));
  };

  const startScan = async () => {
    if (!scanConfig.targetIdentifier || !scanConfig.name) {
      toast({
        title: "Missing Information",
        description: "Please provide scan name and target",
        variant: "destructive"
      });
      return;
    }

    setScanning(true);

    try {
      const { data, error } = await supabase.functions.invoke('security-scan', {
        body: {
          scanType: scanConfig.scanType,
          targetType: scanConfig.targetType,
          targetIdentifier: scanConfig.targetIdentifier,
          scanEngine: scanConfig.scanEngine,
          parameters: {
            ...scanConfig.parameters,
            scanName: scanConfig.name
          }
        }
      });

      if (error) throw error;

      toast({
        title: "Scan Started",
        description: `${scanConfig.scanEngine} scan initiated for ${scanConfig.targetIdentifier}`
      });

      // Poll for scan results
      pollScanStatus(data.scan_id);

    } catch (error: any) {
      console.error("Scan initiation error:", error);
      toast({
        title: "Scan Failed",
        description: error.message || "Failed to start vulnerability scan",
        variant: "destructive"
      });
    }

    setScanning(false);
  };

  const pollScanStatus = async (scanId: string) => {
    const pollInterval = setInterval(async () => {
      try {
        const { data, error } = await supabase
          .from('security_scans')
          .select('*')
          .eq('id', scanId)
          .single();

        if (error) throw error;

        setScanResults(prev => {
          const existingIndex = prev.findIndex(r => r.id === scanId);
          if (existingIndex >= 0) {
            const updated = [...prev];
            updated[existingIndex] = data;
            return updated;
          }
          return [...prev, data];
        });

        if (data.status === 'completed' || data.status === 'failed') {
          clearInterval(pollInterval);
          
          if (data.status === 'completed') {
            toast({
              title: "Scan Completed",
              description: `Found ${data.summary?.total || 0} vulnerabilities`
            });
          } else {
            toast({
              title: "Scan Failed",
              description: data.error_message || "Scan completed with errors",
              variant: "destructive"
            });
          }
        }

      } catch (error) {
        console.error("Error polling scan status:", error);
        clearInterval(pollInterval);
      }
    }, 3000);

    // Clean up after 5 minutes
    setTimeout(() => clearInterval(pollInterval), 300000);
  };

  const getScanStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'in_progress':
        return <Clock className="h-4 w-4 text-blue-500 animate-pulse" />;
      default:
        return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Execute real vulnerability scans using industry-standard security tools
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="scanName">Scan Name</Label>
              <Input
                id="scanName"
                value={scanConfig.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="e.g., Production Infrastructure Scan"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="scanEngine">Scanner</Label>
              <Select value={scanConfig.scanEngine} onValueChange={(value) => handleInputChange('scanEngine', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="trivy">Trivy (Container/FS Scanner)</SelectItem>
                  <SelectItem value="owasp-zap">OWASP ZAP (Web App Scanner)</SelectItem>
                  <SelectItem value="openvas">OpenVAS (Network Scanner)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="targetType">Target Type</Label>
              <Select value={scanConfig.targetType} onValueChange={(value) => handleInputChange('targetType', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="infrastructure">Infrastructure</SelectItem>
                  <SelectItem value="container">Container/Image</SelectItem>
                  <SelectItem value="web-application">Web Application</SelectItem>
                  <SelectItem value="network">Network Range</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="target">Target</Label>
              <Input
                id="target"
                value={scanConfig.targetIdentifier}
                onChange={(e) => handleInputChange('targetIdentifier', e.target.value)}
                placeholder="e.g., nginx:latest, https://example.com, 192.168.1.0/24"
              />
            </div>
          </div>

          {scanConfig.scanEngine === 'owasp-zap' && (
            <div className="space-y-2">
              <Label htmlFor="zapApiKey">ZAP API Key (Optional)</Label>
              <Input
                id="zapApiKey"
                type="password"
                value={scanConfig.parameters.apiKey || ''}
                onChange={(e) => handleParameterChange('apiKey', e.target.value)}
                placeholder="Enter ZAP API key if authentication is required"
              />
            </div>
          )}

          {scanConfig.scanEngine === 'openvas' && (
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="gmpUsername">GMP Username</Label>
                <Input
                  id="gmpUsername"
                  value={scanConfig.parameters.username || ''}
                  onChange={(e) => handleParameterChange('username', e.target.value)}
                  placeholder="OpenVAS username"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="gmpPassword">GMP Password</Label>
                <Input
                  id="gmpPassword"
                  type="password"
                  value={scanConfig.parameters.password || ''}
                  onChange={(e) => handleParameterChange('password', e.target.value)}
                  placeholder="OpenVAS password"
                />
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="scanOptions">Additional Options (JSON)</Label>
            <Textarea
              id="scanOptions"
              value={JSON.stringify(scanConfig.parameters, null, 2)}
              onChange={(e) => {
                try {
                  const parsed = JSON.parse(e.target.value);
                  setScanConfig(prev => ({ ...prev, parameters: parsed }));
                } catch {
                  // Invalid JSON, ignore
                }
              }}
              placeholder='{"option1": "value1", "option2": "value2"}'
              rows={3}
            />
          </div>

          <Button 
            onClick={startScan} 
            disabled={scanning}
            className="w-full"
          >
            {scanning ? (
              <>
                <Clock className="mr-2 h-4 w-4 animate-spin" />
                Starting Scan...
              </>
            ) : (
              <>
                <Scan className="mr-2 h-4 w-4" />
                Start Vulnerability Scan
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {scanResults.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Recent Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {scanResults.map((result) => (
                <div key={result.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    {getScanStatusIcon(result.status)}
                    <div>
                      <div className="font-medium">Scan {result.id.slice(0, 8)}</div>
                      <div className="text-sm text-muted-foreground">
                        Started: {new Date(result.started_at).toLocaleString()}
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="capitalize font-medium">{result.status}</div>
                    {result.summary && (
                      <div className="text-sm text-muted-foreground">
                        {result.summary.total} vulnerabilities found
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default VulnerabilityScanner;
